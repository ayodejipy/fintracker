generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String                   @id @db.Uuid
  email                   String                   @unique
  name                    String
  emailVerified           Boolean                  @default(false)
  emailVerifiedAt         DateTime?
  monthlyIncome           Decimal                  @default(0) @db.Decimal(10, 2)
  currency                String                   @default("NGN")
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  budgets                 Budget[]
  categories              Category[]
  loans                   Loan[]
  notificationPreferences NotificationPreferences?
  notifications           Notification[]
  recurringExpenses       RecurringExpense[]
  savingsGoals            SavingsGoal[]
  transactions            Transaction[]

  @@map("users")
}

model Transaction {
  id                 String            @id @default(cuid())
  amount             Decimal           @db.Decimal(10, 2)
  category           String
  description        String
  date               DateTime
  type               String
  createdAt          DateTime          @default(now())
  isRecurring        Boolean           @default(false)
  recurringExpenseId String?
  updatedAt          DateTime          @updatedAt
  commission         Decimal?          @db.Decimal(10, 2)
  confidence         String?
  feeNote            String?
  flags              String?
  importSource       String?
  isImported         Boolean           @default(false)
  needsReview        Boolean           @default(false)
  originalDesc       String?
  otherFees          Decimal?          @db.Decimal(10, 2)
  processingFee      Decimal?          @db.Decimal(10, 2)
  reviewedAt         DateTime?
  serviceFee         Decimal?          @db.Decimal(10, 2)
  stampDuty          Decimal?          @db.Decimal(10, 2)
  transferFee        Decimal?          @db.Decimal(10, 2)
  userNote           String?
  vat                Decimal?          @db.Decimal(10, 2)
  total              Decimal?          @db.Decimal(10, 2)
  userId             String            @db.Uuid
  recurringExpense   RecurringExpense? @relation(fields: [recurringExpenseId], references: [id])
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
  @@index([category])
  @@index([isRecurring])
  @@index([isImported])
  @@index([needsReview])
  @@map("transactions")
}

model Loan {
  id                  String    @id @default(cuid())
  name                String
  initialAmount       Decimal   @db.Decimal(10, 2)
  currentBalance      Decimal   @db.Decimal(10, 2)
  monthlyPayment      Decimal   @db.Decimal(10, 2)
  interestRate        Decimal   @default(0) @db.Decimal(5, 4)
  startDate           DateTime
  projectedPayoffDate DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  userId              String    @db.Uuid
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("loans")
}

model Budget {
  id           String   @id @default(cuid())
  category     String
  monthlyLimit Decimal  @db.Decimal(10, 2)
  currentSpent Decimal  @default(0) @db.Decimal(10, 2)
  month        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category, month])
  @@index([userId])
  @@index([month])
  @@map("budgets")
}

model SavingsGoal {
  id                  String   @id @default(cuid())
  name                String
  targetAmount        Decimal  @db.Decimal(10, 2)
  currentAmount       Decimal  @default(0) @db.Decimal(10, 2)
  targetDate          DateTime
  monthlyContribution Decimal  @db.Decimal(10, 2)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userId              String   @db.Uuid
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("savings_goals")
}

model Notification {
  id            String    @id @default(cuid())
  type          String
  title         String
  message       String
  isRead        Boolean   @default(false)
  priority      String    @default("medium")
  scheduledAt   DateTime?
  readAt        DateTime?
  createdAt     DateTime  @default(now())
  budgetId      String?
  loanId        String?
  savingsGoalId String?
  transactionId String?
  userId        String    @db.Uuid
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([scheduledAt])
  @@map("notifications")
}

model NotificationPreferences {
  id                 String   @id @default(cuid())
  budgetAlerts       Boolean  @default(true)
  paymentReminders   Boolean  @default(true)
  savingsReminders   Boolean  @default(true)
  goalAchievements   Boolean  @default(true)
  emailNotifications Boolean  @default(false)
  pushNotifications  Boolean  @default(true)
  budgetThreshold    Int      @default(80)
  reminderDaysBefore Int      @default(3)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String   @unique @db.Uuid
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model RecurringExpense {
  id                    String        @id @default(cuid())
  name                  String
  amount                Decimal       @db.Decimal(10, 2)
  category              String
  frequency             String
  nextDueDate           DateTime
  lastPaidDate          DateTime?
  isActive              Boolean       @default(true)
  description           String?
  reminderDays          Int           @default(3)
  autoCreateTransaction Boolean       @default(false)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  userId                String        @db.Uuid
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions          Transaction[]

  @@index([userId])
  @@index([nextDueDate])
  @@index([isActive])
  @@map("recurring_expenses")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  value       String
  type        String
  isSystem    Boolean  @default(false)
  isActive    Boolean  @default(true)
  icon        String?
  color       String?
  description String?
  sortOrder   Int      @default(999)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?  @db.Uuid
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, value, type])
  @@index([userId])
  @@index([type])
  @@index([isSystem])
  @@index([isActive])
  @@index([value])
  @@map("categories")
}
